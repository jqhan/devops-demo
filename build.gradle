


buildscript {
    repositories {
        mavenCentral()
    }
    configurations.maybeCreate("pitest")
    dependencies {
        classpath 'info.solidsoft.gradle.pitest:gradle-pitest-plugin:1.4.0'
        pitest 'org.pitest:pitest-junit5-plugin:0.8'
    }
}

plugins {
    id "com.github.spotbugs" version "1.7.1" // run with ./gradlew spotbugsMain or ./gradlew check
    id "pmd" // ./gradlew pmdMain
    id 'checkstyle' // ./gradlew checkstyleMain
}


tasks.withType(Checkstyle) {
    reports {
        html.destination rootProject.file("build/reports/checkstyle.html")
    }
}
spotbugs {
    effort = "max"
}
pmd {
    rulePriority = 2
    ignoreFailures = true
    ruleSets = [
            /* rules
            "braces",
            "basic",
            "naming",
            "android",
            "clone",
            "codesize",
            "controversial",
            "design",
            "finalizers",
            "imports",
            "j2ee",
            "javabeans",
            "junit",
            "logging-jakarta-commons",
            "logging-java",
            "migrating",
            "optimizations",
            "strictexception",
            "strings",
            "sunsecure",
            "typeresolution",
            "unusedcode"
            */

    ]
}


subprojects {

    apply plugin: 'com.github.spotbugs'
    apply plugin: "info.solidsoft.pitest"

    pitest {
        testPlugin = "junit5"
        targetClasses = ['org.gradle.*']  //by default "${project.group}.*"
        threads = 1
        outputFormats = ['XML', 'HTML']
        timestampedReports = true
        failWhenNoMutations = false
    }

    afterEvaluate {
        repositories {
            jcenter()
        }

        compileJava {
            doFirst {
                options.compilerArgs = [
                    '--module-path', classpath.asPath,
                ]
                classpath = files()
            }
        }

        compileTestJava {
            inputs.property("moduleName", moduleName)
            doFirst {
                options.compilerArgs = [
                    '--module-path', classpath.asPath,
                    '--add-modules', 'org.junit.jupiter.api',
                    '--add-reads', "$moduleName=org.junit.jupiter.api",
                    '--patch-module', "$moduleName=" + files(sourceSets.test.java.srcDirs).asPath,
                ]
                classpath = files()
            }
        }

        test {
            useJUnitPlatform()
            inputs.property("moduleName", moduleName)
            doFirst {
                jvmArgs = [
                    '--module-path', classpath.asPath,
                    '--add-modules', 'ALL-MODULE-PATH',
                    '--add-reads', "$moduleName=org.junit.jupiter.api",
                    '--patch-module', "$moduleName=" + files(sourceSets.test.java.outputDir).asPath,
                ]
                classpath = files()
            }
            afterTest { desc, result ->
                logger.quiet "Executing test ${desc.name} [${desc.className}] with result: ${result.resultType}"
            }
        }
    }
}
